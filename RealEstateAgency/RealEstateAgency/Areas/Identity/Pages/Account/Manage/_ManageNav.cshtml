@inject SignInManager<IdentityUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills nav-stacked">
    <li class="@ManageNavPages.IndexNavClass(ViewContext)"><a asp-page="./Index">Profile</a></li>
    <li class="@ManageNavPages.ChangePasswordNavClass(ViewContext)"><a id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (User.IsInRole("Administrator") || User.IsInRole("Moderator"))
    {
        <li class="@ManageNavPages.AgentsNavClass(ViewContext)"><a id="change-password" asp-page="./Agents">Agents</a></li>
        <li class="@ManageNavPages.ApplicationsForAgentNavClass(ViewContext)"><a id="change-password" asp-page="./ApplicationsForAgent">Applications for agent</a></li>
        <li class="@ManageNavPages.AdvertsNavClass(ViewContext)"><a id="change-password" asp-page="./Adverts">Adverts</a></li>
    }
    <li class="@ManageNavPages.MyApplicationForRealEstateNavClass(ViewContext)"><a id="change-password" asp-page="./MyApplicationForRealEstate">My applications for real estate</a></li>
    @if (User.IsInRole("Agent"))
    {
        <li class="@ManageNavPages.MyAdvertsNavClass(ViewContext)"><a id="change-password" asp-page="./MyAdverts">My adverts</a></li>
    }
    @if (hasExternalLogins)
    {
        <li class="@ManageNavPages.ExternalLoginsNavClass(ViewContext)"><a id="external-login" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="@ManageNavPages.PersonalDataNavClass(ViewContext)"><a asp-page="./PersonalData">Personal data</a></li>
</ul>
